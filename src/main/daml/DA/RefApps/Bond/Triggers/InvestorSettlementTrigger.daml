--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

daml 1.2

module DA.RefApps.Bond.Triggers.InvestorSettlementTrigger where

import Daml.Trigger
import DA.Next.Map hiding (filter)
import DA.Foldable

import DA.RefApps.Bond.Settlement
import DA.RefApps.Bond.Lock
import DA.RefApps.Bond.ContractUtils
import DA.Finance.Rule.Asset

investorSettlementTrigger: Trigger ()
investorSettlementTrigger = Trigger
  { initialize = const ()
  , updateState = \_ _ _ -> ()
  , rule = finalizeSettlements
  , registeredTemplates = RegisteredTemplates [
      registeredTemplate @InvestorSettlement,
      registeredTemplate @AuctionLockedCash,
      registeredTemplate @AssetSettlement,
      registeredTemplate @AssetFungible
    ]
  , heartbeat = None
  }

finalizeSettlements: Party -> ACS -> Time -> Map CommandId [Command] -> () -> TriggerA ()
finalizeSettlements party activeContracts _ _ () = do
  let
    investorSettlements = getContracts @InvestorSettlement activeContracts
    auctionLockedCashes = getContracts @AuctionLockedCash activeContracts
    assetSettlements = getContracts @AssetSettlement activeContracts
    assetFungibles = getContracts @AssetFungible activeContracts

  forA_
    investorSettlements
    (finializeSettlement auctionLockedCashes assetSettlements assetFungibles)

finializeSettlement:
  [Contract AuctionLockedCash] ->
  [Contract AssetSettlement] ->
  [Contract AssetFungible] ->
  Contract InvestorSettlement ->
  TriggerA ()
finializeSettlement auctionLockedCashes assetSettlements assetFungibles settlementContract = do
  let
    (id, settlement) = settlementContract
    assetSettlement =
      headNote "Can't find any AssetSettlement contract" $
        findAssetSettlements assetSettlements settlement.cashProvider settlement.investor
    assetFungible =
      headNote "Can't find any AssetFungible contract" $
        findAssetFungibles assetFungibles settlement.cashProvider settlement.investor
    auctionLockedCashIds =
      case (findAuctionLockedCashes auctionLockedCashes settlement.auctionAgent settlement.auctionName) of
        [] -> error ("Can't find any auction locks for this auction: " <> settlement.auctionName)
        result -> result

  id `dedupExercise` InvestorSettlement_Finalize auctionLockedCashIds assetFungible assetSettlement
