--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

daml 1.2

module DA.RefApps.Bond.Triggers.CommissionTrigger where

import Daml.Trigger
import DA.Next.Map qualified as M
import DA.Foldable hiding (length)
import Daml.Trigger.Assert
import DA.Assert
import DA.RefApps.Bond.Test.FullScenario qualified as MarketSetup
import DA.Next.Map qualified
import DA.RefApps.Bond.Roles.IssuerRole
import DA.Finance.Rule.Asset
import DA.RefApps.Bond.FixedRateBond

commissionTrigger : Trigger ()
commissionTrigger = Trigger
  { initialize = const ()
  , updateState = \_ _ _ -> ()
  , rule = commissionRule
  , registeredTemplates = RegisteredTemplates [
      registeredTemplate @CommissionBotTrigger,
      registeredTemplate @FixedRateBondFact,
      registeredTemplate @AssetSettlement,
      registeredTemplate @AssetFungible
    ]
  , heartbeat = None
  }

commissionRule : Party -> ACS -> Time -> M.Map CommandId [Command] -> () -> TriggerA ()
commissionRule party activeContracts _ _ () = do
  let triggerContracts = getContracts @CommissionBotTrigger activeContracts
      fixedRateBondFacts = getContracts @FixedRateBondFact activeContracts
      assetSettlements = getContracts @AssetSettlement activeContracts
      assetFungibles = getContracts @AssetFungible activeContracts

  forA_ triggerContracts $ \(triggerCid, trigger) -> do
    let bondAssetSettlementCid =
          getMatchingAssetSettlementCid
            trigger.issuerBondAccount.provider
            trigger.issuerBondAccount.owner
            assetSettlements
        cashAssetSettlementCid =
          getMatchingAssetSettlementCid
            trigger.cashAccountProvider
            party
            assetSettlements
        bondAssetFungibleCid =
          getAssetFungibleCid
            trigger.issuerBondAccount.provider
            trigger.issuerBondAccount.owner
            assetFungibles
        fixedRateBondFactCid =
          getBondRefData trigger.bondAssetId fixedRateBondFacts
    dedupExercise triggerCid CommissionBotTrigger_InviteAgent with
        bondAssetFungibleCid
        bondAssetSettlementCid
        cashAssetSettlementCid
        fixedRateBondFactCid
  where
    getMatchingAssetSettlementCid provider owner assetSettlements =
      getFirstOrError "Can't find any AssetSettlement contract" $
        filterContractIds (\p -> p.account.provider == provider && p.account.owner == owner) $
          assetSettlements

    getAssetFungibleCid provider owner assetFungibles =
      getFirstOrError "Can't find any AssetFungible contract" $
        filterContractIds (\p -> p.account.provider == provider && p.account.owner == owner) $
          assetFungibles

    getBondRefData assetId bondFacts =
      getFirstOrError "Can't find any BondFact contract" $
        filterContractIds (\p -> p.instrumentId == assetId) bondFacts

    filterContractIds predicate coidsAndContracts =
      [ cid | (cid, c) <- coidsAndContracts, predicate c ]
    getFirstOrError msg items =
      case items of
        first::_ -> first
        []       -> error msg


-- Tests ---------------------------

testCommissionHappens = scenario do
  issuer <- getParty "Issuer"
  bank1 <- getParty "Bank1"
  bank2 <- getParty "Bank2"
  issuer <- getParty "Issuer"

  issuance <-
    MarketSetup.setupIssuance
  commissionBotTrigger <-
    commissionAuction issuer issuance

  let activeContracts = toACS commissionBotTrigger <>
                        toACS issuance.bondBundleData.assetDepositCid <>
                        toACS issuance.bondBundleData.bondSettlementCid <>
                        toACS issuance.bondBundleData.assetFungibleCid <>
                        toACS issuance.bondBundleData.cashSettlementCid <>
                        toACS issuance.fixedRateBondFactCid
  commands <-
    testRule commissionTrigger issuer activeContracts DA.Next.Map.empty ()

  let flattenedCommands = flattenCommands commands
  length flattenedCommands === 1
  assertExerciseCmd flattenedCommands $ \(cid, choiceArg) -> do
    assertEq cid commissionBotTrigger
    assertEq choiceArg $ CommissionBotTrigger_InviteAgent
      issuance.bondBundleData.assetFungibleCid
      issuance.bondBundleData.bondSettlementCid
      issuance.bondBundleData.cashSettlementCid
      issuance.fixedRateBondFactCid

testNoCommissionIfNoTrigger = scenario do
  issuer <- getParty "Issuer"
  bank1 <- getParty "Bank1"
  bank2 <- getParty "Bank2"
  issuer <- getParty "Issuer"

  issuance <-
    MarketSetup.setupIssuance

  let activeContracts = toACS issuance.bondBundleData.assetDepositCid <>
                        toACS issuance.bondBundleData.bondSettlementCid <>
                        toACS issuance.bondBundleData.assetFungibleCid <>
                        toACS issuance.bondBundleData.cashSettlementCid <>
                        toACS issuance.fixedRateBondFactCid
  commands <-
    testRule commissionTrigger issuer activeContracts DA.Next.Map.empty ()

  let flattenedCommands = flattenCommands commands
  length flattenedCommands === 0

-- Helpers -------------------------

commissionAuction : Party -> MarketSetup.TestIssuance -> Scenario (ContractId CommissionBotTrigger)
commissionAuction issuer issuance = scenario $
  submit issuer do
    exercise issuance.roles.issuerRoleCid IssuerRole_CommissionAuction with
      bondAssetDepositCid = issuance.bondBundleData.assetDepositCid
      startDate = MarketSetup.auctionStartDate
      endDate = MarketSetup.auctionEndDate
      minPrice = 40.0
      size = 1000000
